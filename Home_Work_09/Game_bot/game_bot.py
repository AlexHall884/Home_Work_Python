import config
import logging
from tokenize import Token
from config import TOKEN
import stick as st
import telebot
from telegram import ReplyKeyboardMarkup, ReplyKeyboardRemove, Update
from telegram.ext import (
    Updater,
    CommandHandler,
    MessageHandler,
    Filters,
    ConversationHandler,
)
bot = telebot.TeleBot(config.TOKEN)
# –í–∫–ª—é—á–∏–º –≤–µ–¥–µ–Ω–∏–µ –∂—É—Ä–Ω–∞–ª–∞
logging.basicConfig(
    format='%(asctime)s - %(name)s - %(levelname)s - %(message)s', level=logging.INFO
)
logger = logging.getLogger(__name__)

# –û–ø—Ä–µ–¥–µ–ª—è–µ–º –∫–æ–Ω—Å—Ç–∞–Ω—Ç—ã —ç—Ç–∞–ø–æ–≤ —Ä–∞–∑–≥–æ–≤–æ—Ä–∞
SHOW_MENU, MENU, RULES, GAME, CANDY_COUNT, PER_TURN , PLAYER_TURN, COMPUTER_TURN = range(8)

# —Ñ—É–Ω–∫—Ü–∏—è –æ–±—Ä–∞—Ç–Ω–æ–≥–æ –≤—ã–∑–æ–≤–∞ —Ç–æ—á–∫–∏ –≤—Ö–æ–¥–∞ –≤ —Ä–∞–∑–≥–æ–≤–æ—Ä
def start(update, _):
    reply_keyboard = [['GO ‚û°']]
    markup_key = ReplyKeyboardMarkup(reply_keyboard, resize_keyboard=True, one_time_keyboard=True)
    bot.send_sticker(update.message.chat.id, st.hello)
    update.message.reply_text(
        '–î–æ–±—Ä–æ –ø–æ–∂–∞–ª–æ–≤–∞—Ç—å –≤ –∏–≥—Ä—É!''\n'
        'üç¨ <–ö–û–ù–§–ï–¢–ê> üç¨' '\n',
        reply_markup=markup_key)    
    return SHOW_MENU

def show_menu(update, _):
    user = update.message.from_user
    logger.info("–ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å –≤–≤—ë–ª: %s: %f / %f", user.first_name, update.message.text)
    reply_keyboard = [['üìú Rules', 'üéÆ Game', 'üö™ Exit']]
    # –°–æ–∑–¥–∞–µ–º –ø—Ä–æ—Å—Ç—É—é –∫–ª–∞–≤–∏–∞—Ç—É—Ä—É –¥–ª—è –æ—Ç–≤–µ—Ç–∞
    markup_key = ReplyKeyboardMarkup(reply_keyboard, resize_keyboard=True, one_time_keyboard=True)
    # –ù–∞—á–∏–Ω–∞–µ–º —Ä–∞–∑–≥–æ–≤–æ—Ä —Å –≤–æ–ø—Ä–æ—Å–∞
    bot.send_sticker(update.message.chat.id, st.game )
    update.message.reply_text(
        '–î–∞–≤–∞–π—Ç–µ —Å—ã–≥—Ä–∞–µ–º? ''\n' 
        '–ù–æ –¥–ª—è –Ω–∞—á–∞–ª–∞, –ø—Ä–æ—á–∏—Ç–∞–π—Ç–µ –ø—Ä–∞–≤–∏–ª–∞ –Ω–∞–∂–∞–≤ –∫–Ω–æ–ø–∫—É <Rules> –∏–ª–∏ –º–æ–∂–µ—Ç–µ –æ—Ç–∫–∞–∑–∞—Ç—å—Å—è –Ω–∞–∂–∞–≤ <Exit>',
        reply_markup=markup_key)
    return MENU

def menu(update, _):
    user = update.message.from_user
    logger.info("–ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å –≤–≤—ë–ª: %s: %f / %f", user.first_name, update.message.text)
    choice = update.message.text
    if choice == 'üìú Rules':
        reply_keyboard = [['GO ‚û°']]
        markup_key = ReplyKeyboardMarkup(reply_keyboard, resize_keyboard=True, one_time_keyboard=True)
        update.message.reply_text('–í–ø–µ—Ä—ë–¥ –∫ –∑–Ω–∞–Ω–∏—è–º!', reply_markup=markup_key)
        return RULES
    if choice == 'üéÆ Game':
        reply_keyboard = [['PlAY ‚ñ∂']]
        markup_key = ReplyKeyboardMarkup(reply_keyboard, resize_keyboard=True, one_time_keyboard=True)
        update.message.reply_text('–ü–æ–µ—Ö–∞–ª–∏!!!', reply_markup=markup_key)
        return GAME
    if choice == 'üö™ Exit':
        return cancel(update, _)

def rules(update, _):
    user = update.message.from_user
    logger.info("–ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å –≤–≤—ë–ª: %s: %f / %f", user.first_name, update.message.text)
    reply_keyboard = [['BACK ‚¨Ö']]
    markup_key = ReplyKeyboardMarkup(reply_keyboard, resize_keyboard=True, one_time_keyboard=True)
    update.message.reply_text('–ü—Ä–∞–≤–∏–ª–∞ –ø—Ä–æ—Å—Ç—ã: –í—ã –∏–≥—Ä–∞–µ—Ç–µ –ø—Ä–æ—Ç–∏–≤ –±–æ—Ç–∞.''\n' 
                              '–ü–µ—Ä–≤—ã–π —Ö–æ–¥ –±–æ—Ç –≤–µ–∂–ª–∏–≤–æ —É—Å—Ç—É–ø–∞–µ—Ç –≤–∞–º.'
        '–¢–æ—Ç, –∫—Ç–æ –±–µ—Ä–µ—Ç –ø–æ—Å–ª–µ–¥–Ω—é—é –∫–æ–Ω—Ñ–µ—Ç—É üç¨ - –ø—Ä–æ–∏–≥—Ä–∞–ª!', reply_markup=markup_key)
    bot.send_sticker(update.message.chat.id, st.info)
    return SHOW_MENU

def game(update, _):
    user = update.message.from_user
    logger.info("–ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å –≤–≤—ë–ª: %s: %f / %f", user.first_name, update.message.text)
    bot.send_sticker(update.message.chat.id, st.thinks )
    update.message.reply_text(
            '–î–ª—è –Ω–∞—á–∞–ª–∞ –¥–∞–≤–∞–π—Ç–µ –æ–ø—Ä–µ–¥–µ–ª–∏–º, —Å–∫–æ–ª—å–∫–æ –≤—Å–µ–≥–æ —É –Ω–∞—Å –±—É–¥–µ—Ç –∫–æ–Ω—Ñ–µ—Ç? üç¨')
    return CANDY_COUNT

def candy_count(update, context):
    user = update.message.from_user
    logger.info("–ö–æ–ª-–≤–æ –∫–æ–Ω—Ñ–µ—Ç: %s: %s", user.first_name, update.message.text)
    candy_count = update.message.text
    if candy_count.isdigit():
        candy_count = int(candy_count)
        context.user_data['candy_count'] = candy_count
        update.message.reply_text(
            f'–í –∫—É—á–µ {candy_count} –∫–æ–Ω—Ñ–µ—Ç üç¨\n')
        update.message.reply_text(
            f'–í–≤–µ–¥–∏—Ç–µ –∫–æ–ª-–≤–æ –∫–æ–Ω—Ñ–µ—Ç, –∫–æ—Ç–æ—Ä–æ–µ –º–æ–∂–Ω–æ –∑–∞–±—Ä–∞—Ç—å –∑–∞ —Ö–æ–¥.''\n'
            '–û–Ω–æ –¥–æ–ª–∂–Ω–æ –±—ã—Ç—å –º–µ–Ω—å—à–µ –æ–±—â–µ–≥–æ –∫–æ–ª–ª–∏—á–µ—Å—Ç–≤–∞ –∫–æ–Ω—Ñ–µ—Ç –≤ –∫—É—á–µ: ') 
        bot.send_sticker(update.message.chat.id, st.info)
        return PER_TURN
    else:
         bot.send_sticker(update.message.chat.id, st.error)
         update.message.reply_text(
            f'–í—ã –≤–≤–µ–ª–∏ –Ω–µ —á–∏—Å–ª–æ\n')
         

def per_turn(update, context):
    user = update.message.from_user
    logger.info("–ö–æ–ª-–≤–æ –∫–æ–Ω—Ñ–µ—Ç –∑–∞ —Ö–æ–¥ %s: %s", user.first_name, update.message.text)
    candy_count = context.user_data.get('candy_count')
    turn_count = update.message.text
    if turn_count.isdigit():
        turn_count = int(turn_count)
        if candy_count > turn_count and turn_count > 0:
                context.user_data['turn_count'] = turn_count
                update.message.reply_text(
                    f'–ó–∞ —Ö–æ–¥ –º–æ–∂–Ω–æ –±—Ä–∞—Ç—å –æ—Ç 1 –¥–æ {turn_count} –∫–æ–Ω—Ñ–µ—Ç\n')
                update.message.reply_text(
                f'–í–∞—à —Ö–æ–¥. –í–≤–µ–¥–∏—Ç–µ —á–∏—Å–ª–æ –≤ –¥–∏–∞–ø–∞–∑–æ–Ω–µ –æ—Ç 1 –¥–æ {turn_count}: ')
                return PLAYER_TURN
        else:
               bot.send_sticker(update.message.chat.id, st.error)
               update.message.reply_text(f'–ú–∞–∫—Å–∏–º–∞–ª—å–Ω–æ –¥–æ–ø—É—Å—Ç–∏–º–æ–µ –∑–Ω–∞—á–µ–Ω–∏–µ {candy_count -1}') 
    else:
         bot.send_sticker(update.message.chat.id, st.error)
         update.message.reply_text(
            f'–í—ã –≤–≤–µ–ª–∏ –Ω–µ —á–∏—Å–ª–æ\n')



def player_turn(update, context):
    user = update.message.from_user
    logger.info(
        "–•–æ–¥ –∏–≥—Ä–æ–∫–∞ %s: %f / %f", user.first_name, update.message.text)
    turn_count =context.user_data.get('turn_count')
    candy_count = context.user_data.get('candy_count')
    if candy_count < turn_count:
        turn_count = turn_count - (turn_count - candy_count)
    player_turn = update.message.text
    if player_turn.isdigit():
        player_turn = int(player_turn)
        if player_turn <= turn_count:
                candy_count -= player_turn
                if candy_count < 1:
                    reply_keyboard = [['–†–µ–≤–∞–Ω—à ‚û°']]
                    markup_key = ReplyKeyboardMarkup(reply_keyboard, resize_keyboard=True, one_time_keyboard=True)
                    bot.send_sticker(update.message.chat.id, st.win)
                    update.message.reply_text(
                        f'–ò–≥—Ä–æ–∫ –ø—Ä–æ–∏–≥—Ä–∞–ª', reply_markup=markup_key) 
                    return SHOW_MENU 
                context.user_data['candy_count'] = candy_count
                update.message.reply_text(
                        f'–í—ã –≤–≤–µ–ª–∏ {player_turn} –∫–æ–Ω—Ñ–µ—Ç. –í –∫—É—á–µ –æ—Å—Ç–∞–ª–æ—Å—å {candy_count}: ')
                reply_keyboard = [['GO ‚û°']]
                markup_key = ReplyKeyboardMarkup(reply_keyboard, resize_keyboard=True, one_time_keyboard=True)
                bot.send_sticker(update.message.chat.id, st.thinks)
                update.message.reply_text(f'–í–Ω–∏–º–∞–Ω–∏–µ —Ö–æ–¥–∏—Ç –±–æ—Ç...', reply_markup=markup_key)
                context.user_data['turn_count']=turn_count             
                return COMPUTER_TURN
        else:
                bot.send_sticker(update.message.chat.id, st.error)
                update.message.reply_text(
                        f'–ú–∞–∫—Å–∏–º–∞–ª—å–Ω–æ –¥–æ–ø—É—Å—Ç–∏–º–æ–µ –∑–Ω–∞—á–µ–Ω–∏–µ –∑–∞ —Ö–æ–¥ - {turn_count}')    
    else:
        bot.send_sticker(update.message.chat.id, st.error)
        update.message.reply_text(
                        f'–ù—É–∂–Ω–æ –≤–≤–µ—Å—Ç–∏ —á–∏—Å–ª–æ')


        
def computer_turn(update, context):
    turn_count = context.user_data.get('turn_count')
    candy_count = context.user_data.get('candy_count')
    if candy_count < turn_count:
        turn_count = turn_count - (turn_count - candy_count)
    if candy_count > 1:
        candy_count -= turn_count-1
    else:
        candy_count -= turn_count
    if candy_count <1:
        reply_keyboard = [['–£—Ä—Ä–∞! ‚û°']]
        markup_key = ReplyKeyboardMarkup(reply_keyboard, resize_keyboard=True, one_time_keyboard=True)
        bot.send_sticker(update.message.chat.id, st.losses)
        update.message.reply_text(
                        f'–ë–æ—Ç –ø—Ä–æ–∏–≥—Ä–∞–ª', reply_markup=markup_key)
        return SHOW_MENU 
    context.user_data['candy_count'] = candy_count
    update.message.reply_text(
            f'–ë–æ—Ç –ø–æ—Ö–æ–¥–∏–ª –Ω–∞ {turn_count-1} –∫–æ–Ω—Ñ–µ—Ç. –í –∫—É—á–µ –æ—Å—Ç–∞–ª–æ—Å—å {candy_count}: ')
    update.message.reply_text(
            f'–í–∞—à —Ö–æ–¥. –í–≤–µ–¥–∏—Ç–µ —á–∏—Å–ª–æ –≤ –¥–∏–∞–ø–∞–∑–æ–Ω–µ –æ—Ç 1 –¥–æ {turn_count}: ')
    context.user_data['turn_count']=turn_count            
    return PLAYER_TURN



# –û–±—Ä–∞–±–∞—Ç—ã–≤–∞–µ–º –∫–æ–º–∞–Ω–¥—É /cancel –µ—Å–ª–∏ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å –æ—Ç–º–µ–Ω–∏–ª —Ä–∞–∑–≥–æ–≤–æ—Ä
def cancel(update, _):
    # –æ–ø—Ä–µ–¥–µ–ª—è–µ–º –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è
    user = update.message.from_user
    # –ü–∏—à–µ–º –≤ –∂—É—Ä–Ω–∞–ª –æ —Ç–æ–º, —á—Ç–æ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å –Ω–µ —Ä–∞–∑–≥–æ–≤–æ—Ä—á–∏–≤—ã–π
    logger.info("–ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å %s –æ—Ç–º–µ–Ω–∏–ª —Ä–∞–∑–≥–æ–≤–æ—Ä.", user.first_name)
    # –û—Ç–≤–µ—á–∞–µ–º –Ω–∞ –æ—Ç–∫–∞–∑ –ø–æ–≥–æ–≤–æ—Ä–∏—Ç—å
    bot.send_sticker(update.message.chat.id, st.goodbye)
    update.message.reply_text(
        '–ú–æ–µ –¥–µ–ª–æ –ø—Ä–µ–¥–ª–æ–∂–∏—Ç—å - –í–∞—à–µ –æ—Ç–∫–∞–∑–∞—Ç—å—Å—è'
        ' –ë—É–¥–µ—Ç —Å–∫—É—á–Ω–æ - –ø–∏—à–∏.', 
        reply_markup=ReplyKeyboardRemove()
    )
    # –ó–∞–∫–∞–Ω—á–∏–≤–∞–µ–º —Ä–∞–∑–≥–æ–≤–æ—Ä.
    return ConversationHandler.END


if __name__ == '__main__':
    # –°–æ–∑–¥–∞–µ–º Updater –∏ –ø–µ—Ä–µ–¥–∞–µ–º –µ–º—É —Ç–æ–∫–µ–Ω –≤–∞—à–µ–≥–æ –±–æ—Ç–∞.
    updater = Updater(TOKEN)
    # –ø–æ–ª—É—á–∞–µ–º –¥–∏—Å–ø–µ—Ç—á–µ—Ä–∞ –¥–ª—è —Ä–µ–≥–∏—Å—Ç—Ä–∞—Ü–∏–∏ –æ–±—Ä–∞–±–æ—Ç—á–∏–∫–æ–≤
    dispatcher = updater.dispatcher

    # –û–ø—Ä–µ–¥–µ–ª—è–µ–º –æ–±—Ä–∞–±–æ—Ç—á–∏–∫ —Ä–∞–∑–≥–æ–≤–æ—Ä–æ–≤ `ConversationHandler` 
    # —Å —Å–æ—Å—Ç–æ—è–Ω–∏—è–º–∏ GENDER, PHOTO, LOCATION –∏ BIO
    conv_handler = ConversationHandler( # –∑–¥–µ—Å—å —Å—Ç—Ä–æ–∏—Ç—Å—è –ª–æ–≥–∏–∫–∞ —Ä–∞–∑–≥–æ–≤–æ—Ä–∞
        # —Ç–æ—á–∫–∞ –≤—Ö–æ–¥–∞ –≤ —Ä–∞–∑–≥–æ–≤–æ—Ä
        entry_points=[CommandHandler('start', start)],
        # —ç—Ç–∞–ø—ã —Ä–∞–∑–≥–æ–≤–æ—Ä–∞, –∫–∞–∂–¥—ã–π —Å–æ —Å–≤–æ–∏–º —Å–ø–∏—Å–∫–æ–º –æ–±—Ä–∞–±–æ—Ç—á–∏–∫–æ–≤ —Å–æ–æ–±—â–µ–Ω–∏–π
        states={
            SHOW_MENU: [MessageHandler(Filters.text, show_menu)],
            MENU: [MessageHandler(Filters.text, menu)],
            RULES: [MessageHandler(Filters.text, rules)],
            GAME: [MessageHandler(Filters.text, game)],
            CANDY_COUNT:[MessageHandler(Filters.text, candy_count)],
            PER_TURN: [MessageHandler(Filters.text, per_turn)],
            PLAYER_TURN:[MessageHandler(Filters.text, player_turn)],
            COMPUTER_TURN: [MessageHandler(Filters.text, computer_turn)]
            },
        # —Ç–æ—á–∫–∞ –≤—ã—Ö–æ–¥–∞ –∏–∑ —Ä–∞–∑–≥–æ–≤–æ—Ä–∞
        fallbacks=[CommandHandler('cancel', cancel)],
    )

    # –î–æ–±–∞–≤–ª—è–µ–º –æ–±—Ä–∞–±–æ—Ç—á–∏–∫ —Ä–∞–∑–≥–æ–≤–æ—Ä–æ–≤ `conv_handler`
    dispatcher.add_handler(conv_handler)

    # –ó–∞–ø—É—Å–∫ –±–æ—Ç–∞
    print('server started')
    updater.start_polling()
    updater.idle()